#!/bin/bash
set -e

# Epoch-based monotonic versioning system
# Base epoch: 2023-01-01 00:00:00 UTC
BASE_EPOCH=1672531200

# Calculate epoch time
EPOCH_TIME=$(date +%s)

# Calculate monotonic build number (always increasing)
BUILD_NUMBER_RAW=$((EPOCH_TIME - BASE_EPOCH))

# Format as 5-digit number with leading zeros (minimum)
BUILD_NUMBER=$(printf "%05d" $BUILD_NUMBER_RAW)

# If it exceeds 5 digits, keep full number
if [ ${#BUILD_NUMBER} -gt 5 ]; then
    BUILD_NUMBER=$BUILD_NUMBER_RAW
fi

# Read version from Cargo.toml or use defaults
if [ -f "src-tauri/Cargo.toml" ]; then
    MAJOR_VERSION=$(grep '^version = ' src-tauri/Cargo.toml | sed 's/version = "//' | sed 's/"//' | cut -d. -f1)
    MINOR_VERSION=$(grep '^version = ' src-tauri/Cargo.toml | sed 's/version = "//' | sed 's/"//' | cut -d. -f2)
else
    MAJOR_VERSION="1"
    MINOR_VERSION="01"
fi

# Ensure minor version is two digits
MINOR_VERSION=$(printf "%02d" $MINOR_VERSION)

# Construct version string
VERSION="v${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"

# Create version info JSON
cat > "version-info.json" << EOF
{
  "version": "$VERSION",
  "major": $MAJOR_VERSION,
  "minor": "$MINOR_VERSION",
  "build": "$BUILD_NUMBER",
  "build_number_raw": $BUILD_NUMBER_RAW,
  "build_number_formatted": "$BUILD_NUMBER",
  "epoch_time": $EPOCH_TIME,
  "base_epoch": $BASE_EPOCH,
  "build_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "git_commit": "$(git rev-parse HEAD 2>/dev/null || echo 'unknown')",
  "platform": "script-run",
  "build_number_method": "monotonic_offset",
  "build_number_max_digits": "minimum_5",
  "monotonic": true,
  "sorts_correctly": true,
  "higher_number_more_recent": true
}
EOF

# Update Cargo.toml with new version
if [ -f "src-tauri/Cargo.toml" ]; then
    # Backup original
    cp src-tauri/Cargo.toml src-tauri/Cargo.toml.backup

    # Update version
    sed -i "s/^version = .*/version = \"$MAJOR_VERSION.$MINOR_VERSION.$BUILD_NUMBER\"/" src-tauri/Cargo.toml

    # Update package.json version too
    if [ -f "package.json" ]; then
        cp package.json package.json.backup
        sed -i "s/\"version\": \".*\"/\"version\": \"$MAJOR_VERSION.$MINOR_VERSION.$BUILD_NUMBER\"/" package.json
    fi
fi

# Create version header for Rust
cat > "src-tauri/src/version.rs" << EOF
// Generated by version-management.sh
// DO NOT EDIT - Auto-generated

pub const VERSION: &str = "$VERSION";
pub const MAJOR_VERSION: u32 = $MAJOR_VERSION;
pub const MINOR_VERSION: u32 = $MINOR_VERSION;
pub const BUILD_NUMBER: u64 = $BUILD_NUMBER_RAW;
pub const BUILD_NUMBER_RAW: u64 = $BUILD_NUMBER_RAW;
pub const BUILD_NUMBER_FORMATTED: &str = "$BUILD_NUMBER";
pub const EPOCH_TIME: u64 = $EPOCH_TIME;
pub const BASE_EPOCH: u64 = $BASE_EPOCH;

// Version validation
pub fn validate_version_format(version: &str) -> bool {
    // Pattern: v{major}.{minor}.{build} where build is at least 5 digits
    let pattern = r"^v\d+\.\d{2,}\d+$";
    pattern.is_match(version)
}

pub fn is_monotonic(current: &str, previous: &str) -> bool {
    // Extract build numbers and compare
    if let (Some(current_build), Some(prev_build)) = (
        current.strip_prefix('v').and_then(|s| s.split('.').last()),
        previous.strip_prefix('v').and_then(|s| s.split('.').last())
    ) {
        if let (Ok(current_num), Ok(prev_num)) = (current_build.parse::<u64>(), prev_build.parse::<u64>()) {
            return current_num > prev_num;
        }
    }
    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_version_format() {
        assert!(validate_version_format("v1.01.12345"));
        assert!(validate_version_format("v1.01.67890"));
        assert!(!validate_version_format("v1.1.123"));
        assert!(!validate_version_format("v1.01.1234"));
    }

    #[test]
    fn test_monotonic() {
        assert!(is_monotonic("v1.01.12346", "v1.01.12345"));
        assert!(!is_monotonic("v1.01.12345", "v1.01.12346"));
    }
}
EOF

# Output results
echo "=== Version Management Results ==="
echo "Generated version: $VERSION"
echo "Major version: $MAJOR_VERSION"
echo "Minor version: $MINOR_VERSION"
echo "Build number: $BUILD_NUMBER"
echo "Build number (raw): $BUILD_NUMBER_RAW"
echo "Epoch time: $EPOCH_TIME"
echo "Base epoch: $BASE_EPOCH"
echo "Build date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
echo "Git commit: $(git rev-parse HEAD 2>/dev/null || echo 'unknown')"
echo "Monotonic: Yes (always increasing)"
echo "Sorting: Higher numbers = more recent builds ✅"

# Verify monotonic property with previous version if available
if [ -f "version-info-previous.json" ]; then
    PREV_VERSION=$(jq -r '.version' version-info-previous.json 2>/dev/null || echo "")
    if [ -n "$PREV_VERSION" ]; then
        if is_monotonic "$VERSION" "$PREV_VERSION"; then
            echo "✅ Version is newer than previous version ($PREV_VERSION)"
        else
            echo "⚠️  WARNING: Version is not newer than previous version ($PREV_VERSION)"
        fi
    fi
fi

# Save current version as previous for next run
cp version-info.json version-info-previous.json

echo "=== Version information saved to version-info.json ==="
echo "=== Rust version module created at src-tauri/src/version.rs ==="