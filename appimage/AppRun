#!/bin/bash

# AppImage entry point for WowUSB-DS9

# Determine the directory where this AppRun script is located
APPDIR="$(dirname "$(readlink -f "$0")")"

# Prepend bundled directories to PATH and LD_LIBRARY_PATH
export PATH="${APPDIR}/usr/bin:${APPDIR}/usr/sbin:${APPDIR}/bin:${APPDIR}/sbin:${PATH}"
export LD_LIBRARY_PATH="${APPDIR}/usr/lib:${APPDIR}/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}" # Add common lib paths
export PYTHONHOME="${APPDIR}/usr"
export PYTHONPATH="${APPDIR}/usr/lib/python3.8/site-packages:${APPDIR}/usr/lib/python3/dist-packages:${PYTHONPATH}" # Adjust Python version as needed

# Check for essential host system dependencies
# This list should match the non-Python dependencies required by WowUSB-DS9
missing_deps=()
declare -A deps_map
deps_map["sgdisk"]="gdisk"
deps_map["grub-install"]="grub2-common or grub-pc-bin" # Varies by distro
deps_map["grub-mkrescue"]="grub2-common or grub-pc-bin"
deps_map["mkfs.vfat"]="dosfstools"
deps_map["mkfs.ntfs"]="ntfs-3g"
deps_map["mkfs.exfat"]="exfatprogs or exfat-utils"
deps_map["mkfs.f2fs"]="f2fs-tools"
deps_map["mkfs.btrfs"]="btrfs-progs"
deps_map["parted"]="parted"
deps_map["wipefs"]="util-linux or wipefs"
deps_map["pkexec"]="policykit-1"
deps_map["debootstrap"]="debootstrap" # Optional, for full Linux install
deps_map["pacstrap"]="arch-install-scripts" # Optional, for full Arch install
deps_map["p7zip"]="p7zip or p7zip-full"

echo "Checking for required host system tools..."
for cmd in "${!deps_map[@]}"; do
    if ! command -v "$cmd" &> /dev/null; then
        # Special handling for optional tools
        if [[ "$cmd" == "debootstrap" || "$cmd" == "pacstrap" ]]; then
            echo "Info: Optional tool '$cmd' (package: ${deps_map[$cmd]}) not found. Full Linux Distro install for this type may not work."
        else
             missing_deps+=("'$cmd' (recommended package: ${deps_map[$cmd]})")
        fi
    fi
done

if [ ${#missing_deps[@]} -ne 0 ]; then
    echo "Error: Required host system tools are missing:" >&2
    for dep in "${missing_deps[@]}"; do
        echo "  - $dep" >&2
    done
    echo "Please install them using your system's package manager." >&2
    # Optionally, try to display a GUI error message if zenity or kdialog is available
    if command -v zenity &> /dev/null; then
        zenity --error --text="Required host system tools are missing:\n\n$(printf '  - %s\n' "${missing_deps[@]}")\n\nPlease install them to continue." --title="WowUSB-DS9 Dependency Error"
    elif command -v kdialog &> /dev/null; then
        kdialog --error "Required host system tools are missing:\n\n$(printf '  - %s\n' "${missing_deps[@]}")\n\nPlease install them to continue." --title="WowUSB-DS9 Dependency Error"
    fi
    exit 1
fi
echo "All required host tools found."

# Launch the application
# The actual Python executable should be within $APPDIR/usr/bin/python3
# The GUI script `woeusbgui` should also be in $APPDIR/usr/bin (copied from the project)
if [ -f "${APPDIR}/usr/bin/python3" ] && [ -x "${APPDIR}/usr/bin/woeusbgui" ]; then
    # Ensure WowUSB modules can be found if they are in usr/lib/pythonX.Y/site-packages/WowUSB
    # The PYTHONPATH set above should handle this.
    # If woeusbgui is a Python script, it might be called directly with the bundled python
    # exec "${APPDIR}/usr/bin/python3" "${APPDIR}/usr/bin/woeusbgui" "$@"
    # If woeusbgui is a wrapper script generated by setuptools/pip, it should already point to the correct python.
    exec "${APPDIR}/usr/bin/woeusbgui" "$@"
else
    echo "Error: Cannot find Python interpreter or woeusbgui script in the AppImage." >&2
    if command -v zenity &> /dev/null; then
        zenity --error --text="Critical Error: Cannot find Python interpreter or woeusbgui script in the AppImage." --title="WowUSB-DS9 AppImage Error"
    fi
    exit 1
fi
