// Generated by version-management.sh
// DO NOT EDIT - Auto-generated

pub const VERSION: &str = "v1.01.87214212";
pub const MAJOR_VERSION: u32 = 1;
pub const MINOR_VERSION: u32 = 01;
pub const BUILD_NUMBER: u64 = 87214212;
pub const BUILD_NUMBER_RAW: u64 = 87214212;
pub const BUILD_NUMBER_FORMATTED: &str = "87214212";
pub const EPOCH_TIME: u64 = 1759745412;
pub const BASE_EPOCH: u64 = 1672531200;

// Version validation
pub fn validate_version_format(version: &str) -> bool {
    // Pattern: v{major}.{minor}.{build} where build is at least 5 digits
    let pattern = r"^v\d+\.\d{2,}\d+$";
    pattern.is_match(version)
}

pub fn is_monotonic(current: &str, previous: &str) -> bool {
    // Extract build numbers and compare
    if let (Some(current_build), Some(prev_build)) = (
        current.strip_prefix('v').and_then(|s| s.split('.').last()),
        previous.strip_prefix('v').and_then(|s| s.split('.').last())
    ) {
        if let (Ok(current_num), Ok(prev_num)) = (current_build.parse::<u64>(), prev_build.parse::<u64>()) {
            return current_num > prev_num;
        }
    }
    false
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_version_format() {
        assert!(validate_version_format("v1.01.12345"));
        assert!(validate_version_format("v1.01.67890"));
        assert!(!validate_version_format("v1.1.123"));
        assert!(!validate_version_format("v1.01.1234"));
    }

    #[test]
    fn test_monotonic() {
        assert!(is_monotonic("v1.01.12346", "v1.01.12345"));
        assert!(!is_monotonic("v1.01.12345", "v1.01.12346"));
    }
}
